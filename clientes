import sys
import mysql.connector
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QVBoxLayout, QHBoxLayout, QPushButton,
    QTableWidget, QTableWidgetItem, QLineEdit, QDialog, QMessageBox, QFormLayout
)
from PyQt6.QtCore import Qt


# ConexiÃ³n a la base de datos
def obtener_clientes():
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="1234",
            database="sistema_ventas"
        )
        cursor = conn.cursor()
        cursor.execute("SELECT nombre_cliente, fecha_registro FROM clientes")
        clientes = cursor.fetchall()
        conn.close()
        return clientes
    except mysql.connector.Error as e:
        print("Error al conectar con la BD:", e)
        return []


def insertar_cliente(nombre, email, telefono, direccion):
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="1234",
            database="sistema_ventas"
        )
        cursor = conn.cursor()
        query = "INSERT INTO clientes (nombre_cliente, email_cliente, telefono_cliente, direccion) VALUES (%s, %s, %s, %s)"
        cursor.execute(query, (nombre, email, telefono, direccion))
        conn.commit()
        conn.close()
        return True
    except mysql.connector.Error as e:
        print("Error al insertar cliente:", e)
        return False


class DialogoAgregarCliente(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Agregar Cliente")
        self.setFixedWidth(300)

        layout = QFormLayout()
        self.nombre = QLineEdit()
        self.email = QLineEdit()
        self.telefono = QLineEdit()
        self.direccion = QLineEdit()

        layout.addRow("Nombre:", self.nombre)
        layout.addRow("Email:", self.email)
        layout.addRow("TelÃ©fono:", self.telefono)
        layout.addRow("DirecciÃ³n:", self.direccion)

        self.boton_guardar = QPushButton("Guardar")
        self.boton_guardar.clicked.connect(self.guardar_cliente)
        layout.addRow(self.boton_guardar)

        self.setLayout(layout)

    def guardar_cliente(self):
        if insertar_cliente(self.nombre.text(), self.email.text(), self.telefono.text(), self.direccion.text()):
            QMessageBox.information(self, "Ã‰xito", "Cliente agregado correctamente.")
            self.accept()
        else:
            QMessageBox.critical(self, "Error", "No se pudo agregar el cliente.")


class ModuloClientes(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Clientes - ICI")
        self.setMinimumSize(500, 400)

        self.titulo = QLabel("ðŸ“‹ Lista de Clientes")
        self.titulo.setStyleSheet("font-size: 18px; font-weight: bold;")

        self.tabla = QTableWidget()
        self.tabla.setColumnCount(2)
        self.tabla.setHorizontalHeaderLabels(["Nombre del Cliente", "Fecha de Registro"])
        self.tabla.horizontalHeader().setStretchLastSection(True)

        self.boton_agregar = QPushButton("âž• Agregar Cliente")
        self.boton_agregar.clicked.connect(self.mostrar_dialogo_agregar)

        layout_botones = QHBoxLayout()
        layout_botones.addWidget(self.boton_agregar)
        layout_botones.addStretch()

        layout_principal = QVBoxLayout()
        layout_principal.addWidget(self.titulo)
        layout_principal.addLayout(layout_botones)
        layout_principal.addWidget(self.tabla)

        self.setLayout(layout_principal)

        self.cargar_clientes()

    def cargar_clientes(self):
        self.tabla.setRowCount(0)
        clientes = obtener_clientes()
        for fila_idx, (nombre, fecha) in enumerate(clientes):
            self.tabla.insertRow(fila_idx)
            self.tabla.setItem(fila_idx, 0, QTableWidgetItem(nombre))
            self.tabla.setItem(fila_idx, 1, QTableWidgetItem(str(fecha)))

    def mostrar_dialogo_agregar(self):
        dialogo = DialogoAgregarCliente(self)
        if dialogo.exec():
            self.cargar_clientes()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ventana = ModuloClientes()
    ventana.show()
    sys.exit(app.exec())
