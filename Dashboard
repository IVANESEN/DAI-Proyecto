import sys
import mysql.connector
from PyQt6.QtWidgets import (
    QApplication, QWidget, QLabel, QLineEdit, QPushButton,
    QVBoxLayout, QHBoxLayout, QMessageBox, QSpacerItem, QSizePolicy, QFrame, QDialog,
    QFormLayout, QTableWidget, QTableWidgetItem, QMenu, QStackedLayout
)
from PyQt6.QtGui import QPixmap, QFont, QColor
from PyQt6.QtCore import Qt

# ------------------ Conexion BD ------------------
def obtener_clientes():
    try:
        conn = mysql.connector.connect(
            host="localhost", user="root", password="1234", database="sistema_ventas"
        )
        cursor = conn.cursor()
        cursor.execute("SELECT nombre_cliente, fecha_registro FROM clientes")
        clientes = cursor.fetchall()
        conn.close()
        return clientes
    except mysql.connector.Error as e:
        print("Error al conectar con la BD:", e)
        return []

def insertar_cliente(nombre, email, telefono, direccion):
    try:
        conn = mysql.connector.connect(
            host="localhost", user="root", password="1234", database="sistema_ventas"
        )
        cursor = conn.cursor()
        query = "INSERT INTO clientes (nombre_cliente, email_cliente, telefono_cliente, direccion) VALUES (%s, %s, %s, %s)"
        cursor.execute(query, (nombre, email, telefono, direccion))
        conn.commit()
        conn.close()
        return True
    except mysql.connector.Error as e:
        print("Error al insertar cliente:", e)
        return False

# ------------------ Clientes ------------------
class DialogoAgregarCliente(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Agregar Cliente")
        self.setFixedWidth(300)

        layout = QFormLayout()
        self.nombre = QLineEdit()
        self.email = QLineEdit()
        self.telefono = QLineEdit()
        self.direccion = QLineEdit()

        layout.addRow("Nombre:", self.nombre)
        layout.addRow("Email:", self.email)
        layout.addRow("TelÃ©fono:", self.telefono)
        layout.addRow("DirecciÃ³n:", self.direccion)

        self.boton_guardar = QPushButton("Guardar")
        self.boton_guardar.clicked.connect(self.guardar_cliente)
        layout.addRow(self.boton_guardar)

        self.setLayout(layout)

    def guardar_cliente(self):
        if insertar_cliente(self.nombre.text(), self.email.text(), self.telefono.text(), self.direccion.text()):
            QMessageBox.information(self, "Ã‰xito", "Cliente agregado correctamente.")
            self.accept()
        else:
            QMessageBox.critical(self, "Error", "No se pudo agregar el cliente.")

class ModuloClientes(QWidget):
    def __init__(self):
        super().__init__()
        self.titulo = QLabel("ðŸ“‹ Lista de Clientes")
        self.titulo.setStyleSheet("font-size: 18px; font-weight: bold;")

        self.tabla = QTableWidget()
        self.tabla.setColumnCount(2)
        self.tabla.setHorizontalHeaderLabels(["Nombre del Cliente", "Fecha de Registro"])
        self.tabla.horizontalHeader().setStretchLastSection(True)

        self.boton_agregar = QPushButton("âž• Agregar Cliente")
        self.boton_agregar.clicked.connect(self.mostrar_dialogo_agregar)

        layout_botones = QHBoxLayout()
        layout_botones.addWidget(self.boton_agregar)
        layout_botones.addStretch()

        layout_principal = QVBoxLayout()
        layout_principal.addWidget(self.titulo)
        layout_principal.addLayout(layout_botones)
        layout_principal.addWidget(self.tabla)

        self.setLayout(layout_principal)
        self.cargar_clientes()

    def cargar_clientes(self):
        self.tabla.setRowCount(0)
        for fila_idx, (nombre, fecha) in enumerate(obtener_clientes()):
            self.tabla.insertRow(fila_idx)
            self.tabla.setItem(fila_idx, 0, QTableWidgetItem(nombre))
            self.tabla.setItem(fila_idx, 1, QTableWidgetItem(str(fecha)))

    def mostrar_dialogo_agregar(self):
        dialogo = DialogoAgregarCliente(self)
        if dialogo.exec():
            self.cargar_clientes()

# ------------------ Proveedores ------------------
class ProveedoresWidget(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()
        titulo = QLabel("ðŸ‘¥ Proveedores actuales")
        titulo.setStyleSheet("color: gray; font-size: 14px;")
        layout.addWidget(titulo)

        nombre = QLabel("Vidri\nFreund")
        nombre.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        layout.addWidget(nombre)

        boton = QPushButton("Agregar")
        boton.setStyleSheet("background-color: #1e40ff; color: white; border-radius: 8px;")
        layout.addWidget(boton, alignment=Qt.AlignmentFlag.AlignRight)

        self.setLayout(layout)

# ------------------ Dashboard ------------------
class Dashboard(QWidget):
    def __init__(self, login_widget):
        super().__init__()
        self.login_widget = login_widget
        self.setWindowTitle("Dashboard ICI")
        self.setMinimumSize(1000, 600)

        layout_main = QHBoxLayout(self)

        # MenÃº lateral
        menu = QFrame()
        menu.setFixedWidth(200)
        menu.setStyleSheet("background-color: white; border-right: 1px solid #ccc;")
        menu_layout = QVBoxLayout(menu)

        label_logo = QLabel("ICI")
        label_logo.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        label_logo.setAlignment(Qt.AlignmentFlag.AlignCenter)

        btn_usuario = QPushButton("ðŸ‘¤ Usuario â–¾")
        btn_usuario.setMenu(QMenu())
        btn_usuario.menu().addAction("Perfil")
        btn_usuario.menu().addAction("Cerrar sesiÃ³n", self.logout)

        menu_layout.addWidget(label_logo)
        menu_layout.addWidget(btn_usuario)
        menu_layout.addStretch()
        layout_main.addWidget(menu)

        # Panel central
        titulo_principal = QLabel("Hola, Claudia ðŸ‘‹")
        titulo_principal.setFont(QFont("Arial", 20, QFont.Weight.Bold))  # TamaÃ±o 20 y negrita

        subtitulo = QLabel("Bienvenida a tu dashboard de ventas del mes.")
        subtitulo.setFont(QFont("Arial", 14))  # Opcionalmente mÃ¡s pequeÃ±o que el tÃ­tulo

        contenido = QVBoxLayout()
        contenido.addWidget(titulo_principal)
        contenido.addWidget(subtitulo)
        contenido.addWidget(ModuloClientes())
        contenido.addWidget(ProveedoresWidget())
        layout_main.addLayout(contenido)

    def logout(self):
        self.close()
        self.login_widget.show()

# ------------------ Login ------------------
class Login(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Login ICI")
        self.setGeometry(100, 100, 700, 400)
        self.setStyleSheet("background-color: #f0f2f5;")

        layout_principal = QHBoxLayout()

        layout_logo = QVBoxLayout()
        logo_label = QLabel()
        pixmap = QPixmap("proyecto/ICI_logo(login).png").scaled(250, 250, Qt.AspectRatioMode.KeepAspectRatio)
        logo_label.setPixmap(pixmap)
        logo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout_logo.addWidget(logo_label)
        layout_principal.addLayout(layout_logo)

        layout_login = QVBoxLayout()
        layout_login.setContentsMargins(40, 30, 40, 30)

        login_box = QWidget()
        login_box.setStyleSheet("background-color: #3c258c; border-radius: 5px;")
        login_layout = QVBoxLayout(login_box)

        titulo = QLabel("Login")
        titulo.setFont(QFont("Arial", 16, QFont.Weight.Bold))
        titulo.setStyleSheet("color: white;")
        titulo.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.usuario_input = QLineEdit()
        self.usuario_input.setPlaceholderText("Email o Usuario")
        self.usuario_input.setStyleSheet("padding: 5px; color: white; background-color: transparent; border: none; border-bottom: 1px solid white;")

        self.contrasena_input = QLineEdit()
        self.contrasena_input.setPlaceholderText("Password")
        self.contrasena_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.contrasena_input.setStyleSheet("padding: 5px; color: white; background-color: transparent; border: none; border-bottom: 1px solid white;")

        self.boton_login = QPushButton("Login")
        self.boton_login.setStyleSheet("""
            QPushButton {
                background-color: lightgray;
                color: #3c258c;
                border-radius: 10px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: white;
            }
        """)
        self.boton_login.clicked.connect(self.verificar_credenciales)

        enlaces = QHBoxLayout()
        crear = QLabel("<a href='#' style='color: white;'>Create an account</a>")
        crear.setOpenExternalLinks(False)
        recuperar = QLabel("<a href='#' style='color: white;'>Forgot password?</a>")
        recuperar.setOpenExternalLinks(False)
        enlaces.addWidget(crear)
        enlaces.addSpacerItem(QSpacerItem(40, 10, QSizePolicy.Policy.Expanding))
        enlaces.addWidget(recuperar)

        login_layout.addWidget(titulo)
        login_layout.addSpacing(10)
        login_layout.addWidget(self.usuario_input)
        login_layout.addWidget(self.contrasena_input)
        login_layout.addSpacing(10)
        login_layout.addWidget(self.boton_login)
        login_layout.addSpacing(20)
        login_layout.addLayout(enlaces)

        layout_login.addWidget(login_box)
        layout_principal.addLayout(layout_login)
        self.setLayout(layout_principal)

    def verificar_credenciales(self):
        usuario = self.usuario_input.text()
        clave = self.contrasena_input.text()

        try:
            conn = mysql.connector.connect(
                host="localhost", user="root", password="1234", database="sistema_ventas"
            )
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM usuarios WHERE usuario=%s AND contraseÃ±a=%s", (usuario, clave))
            if cursor.fetchone():
                self.hide()
                self.dashboard = Dashboard(self)
                self.dashboard.show()
            else:
                QMessageBox.warning(self, "Error", "Credenciales incorrectas.")
            conn.close()
        except mysql.connector.Error as err:
            QMessageBox.critical(self, "Error de conexiÃ³n", f"{err}")


# ------------------ Main ------------------
if __name__ == "__main__":
    app = QApplication(sys.argv)
    login = Login()
    login.show()
    sys.exit(app.exec())
